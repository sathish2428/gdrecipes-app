{"version":3,"sources":["Recipe.js","App.js","serviceWorker.js","index.js"],"names":["Recipe","props","className","style","backgroundImage","image","title","totalTime","href","Math","floor","calories","totalWeight","ingredients","map","ingredient","i","class","key","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","APP_URL","a","fetch","response","json","data","hits","getRecipe","onSubmit","e","preventDefault","forhtml","type","autoComplete","value","onChange","target","id","placeholder","color","beat","recipe","label","ingredientLines","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oRAEaA,EAAS,SAACC,GACnB,OAEI,yBAAKC,UAAU,SACX,yBAAKA,UAAU,cACf,yBAAKA,UAAU,cACX,yBAAKC,MAAO,CAACC,gBAAgB,OAAOH,EAAMI,MAAM,KAAMH,UAAU,WAEhE,wBAAIA,UAAU,QAAQD,EAAMK,OAC5B,yBAAKJ,UAAU,SAA6B,IAApBD,EAAMM,WAAmBN,EAAMM,UAAW,SAClE,yBAAKL,UAAU,WACX,yBAAKA,UAAU,eACX,4BAAI,uBAAGM,KAAK,KAAI,8BAAOC,KAAKC,MAAMT,EAAMU,SAAS,IAAU,6CAC3D,4BAAI,uBAAGH,KAAK,KAAI,8BAAOC,KAAKC,MAAMT,EAAMW,YAAY,IAAU,kDAElE,yBAAKV,UAAU,cACX,iDAIZ,yBAAKA,UAAU,aACb,4CACDD,EAAMY,YAAYC,KAAI,SAACC,EAAYC,GACpC,OAAQ,yBAAKC,MAAM,YAAWC,IAAKF,GAA3B,IAAgCA,EAAI,EAApC,KAAyCD,U,8BCqC9CI,MAxDf,SAAalB,GAAQ,IAAD,EACYmB,mBAAS,IADrB,mBACXC,EADW,KACFC,EADE,OAEUF,mBAAS,IAFnB,mBAEXG,EAFW,KAEHC,EAFG,OAGQJ,mBAAS,YAHjB,mBAGXK,EAHW,KAGJC,EAHI,KA2BlB,OAtBAC,qBAAU,WACR,IAEMC,EAAO,0CAAsCH,EAAtC,mBAFE,WAEF,oBADG,qCAED,uCAAG,8BAAAI,EAAA,sEACOC,MAAMF,GADb,cACVG,EADU,gBAEGA,EAASC,OAFZ,OAEVC,EAFU,OAGhBX,EAAWW,EAAKC,MAHA,2CAAH,qDAKfC,KACC,CAACV,IAaF,kBAAC,WAAD,KACE,yBAAKvB,UAAU,mBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,yBACb,0BAAMkC,SAfE,SAACC,GACjBA,EAAEC,iBACFZ,EAASH,GACTC,EAAU,KAYyBtB,UAAU,eACnC,2BAAOA,UAAU,UAAUqC,QAAQ,gCAAnC,iBACA,yBAAKrC,UAAU,eACb,2BAAOsC,KAAK,OAAOC,aAAa,MAAMvC,UAAU,eAAewC,MAAOnB,EAAQoB,SAZvE,SAACN,GACpBb,EAAUa,EAAEO,OAAOF,QAW+FG,GAAG,+BAA+BC,YAAY,kBACpJ,yBAAK5C,UAAU,uBACb,4BAAQsC,KAAK,SAAStC,UAAU,qBAAqB,kBAAC,IAAD,CAAQ6C,MAAM,UAAUC,MAAM,UAM7F,yBAAK9C,UAAU,aACb,yBAAKA,UAAU,iBACZmB,EAAQP,KAAI,SAACmC,EAAQjC,GAAT,OACX,kBAAC,EAAD,CAAQE,IAAKF,EAAGV,MAAO2C,EAAOA,OAAOC,MAAO7C,MAAO4C,EAAOA,OAAO5C,MAAOM,SAAUsC,EAAOA,OAAOtC,SAAUE,YAAaoC,EAAOA,OAAOE,gBAAiB5C,UAAW0C,EAAOA,OAAO1C,UAAWK,YAAaqC,EAAOA,OAAOrC,sBCxC/MwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8692be0a.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const Recipe = (props) => {\n    return (\n       \n        <div className=\"board\">\n            <div className=\"card-inner\">\n            <div className=\"card-front\">\n                <div style={{backgroundImage:\"url(\"+props.image+\")\"}} className=\"banner\"></div>\n                \n                <h2 className=\"name\">{props.title}</h2>\n                <div className=\"title\">{props.totalTime !== 0 && props.totalTime +\" mins\"}</div>\n                <div className=\"actions\">\n                    <div className=\"follow-info\">\n                        <h2><a href=\"/\"><span>{Math.floor(props.calories,2)}</span><small>Calories</small></a></h2>\n                        <h2><a href=\"/\"><span>{Math.floor(props.totalWeight,2)}</span><small>Weight (gms)</small></a></h2>\n                    </div>\n                    <div className=\"follow-btn\">\n                        <button>See Recipe</button>\n                    </div>\n                </div>\n            </div>\n            <div className=\"card-back\">\n              <h4>Ingredients:</h4>  \n            {props.ingredients.map((ingredient, i) => {\n            return (<div class=\"card-text\"key={i}> {i + 1}. {ingredient}</div>)\n            })}\n            </div>\n            </div>    \n        </div>\n    );\n}","import React, { useEffect, useState, Fragment } from 'react';\nimport { Recipe } from './Recipe';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Search from 'react-ionicons/lib/MdSearch';\nimport './App.css';\n\nfunction App(props) {\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState('');\n  const [query, setQuery] = useState('Capsicum');\n\n  useEffect(() => {\n    const APP_ID = \"5e28b79f\";\n    const APP_KEY = \"b31cd079339c519b1c60a1c805b0067c\";\n    const APP_URL = `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`;\n    const getRecipe = async () => {\n      const response = await fetch(APP_URL);\n      const data = await response.json();\n      setRecipes(data.hits);\n    }\n    getRecipe();\n  }, [query]);\n\n  const getSearch = (e) => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch(\"\");\n  }\n\n  const updateSearch = (e) => {\n    setSearch(e.target.value);\n  }\n\n  return (\n    <Fragment>\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n          <div className=\"col-md-4 mx-auto my-5\">\n            <form onSubmit={getSearch} className=\"search-form\">\n              <label className=\"sr-only\" forhtml=\"inlineFormInputGroupUsername\">Search Recipe</label>\n              <div className=\"input-group\">\n                <input type=\"text\" autoComplete=\"off\" className=\"form-control\" value={search} onChange={updateSearch} id=\"inlineFormInputGroupUsername\" placeholder=\"Search Recipe\" />\n                <div className=\"input-group-prepend\">\n                  <button type=\"submit\" className=\"input-group-text \" ><Search color=\"#494949\" beat={true} /></button>\n                </div>\n              </div>\n            </form>\n          </div>\n        </div>\n        <div className=\"col-md-12\">\n          <div className=\"card-columns \">\n            {recipes.map((recipe, i) => (\n              <Recipe key={i} title={recipe.recipe.label} image={recipe.recipe.image} calories={recipe.recipe.calories} ingredients={recipe.recipe.ingredientLines} totalTime={recipe.recipe.totalTime} totalWeight={recipe.recipe.totalWeight} />\n            ))}\n            </div>\n        </div>\n      </div>\n\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}